Module("MiniJava.main.packed",Imports([Import("MiniJava.main"),Import("MiniJava-Menus"),Import("MiniJava-Colorer"),Import("MiniJava-Completions"),Import("MiniJava-Folding"),Import("MiniJava-References"),Import("MiniJava-Syntax"),Import("MiniJava-Colorer.generated"),Import("MiniJava.generated"),Import("Statements.generated"),Import("Expressions.generated"),Import("Classes.generated"),Import("Lexical.generated"),Import("MiniJava-Folding.generated"),Import("MiniJava-References.generated"),Import("MiniJava-Syntax.generated")]),[Language(" General properties",[LanguageName("MiniJava"),LanguageId("org.strategoxt.spoofax.minijava"),Extends(Values(["Root"])),Description(String("\"Spoofax/IMP-generated editor for the MiniJava language\"")),URL("http://strategoxt.org"),Extensions(Values(["mjv"])),Table("milestone1/MiniJava.tbl"),StartSymbols([Sort("Start")]),SemanticProvider("include/minijava.ctree"),SemanticObserver(Strategy("editor-analyze"),[MultiFile])]),Menus([ToolbarMenu(Label(String("\"Syntax\"")),[Action(String("\"Show abstract syntax\""),Strategy("debug-show-aterm"),[OpenEditor,RealTime,Meta,Source]),Action(String("\"Show desugared syntax\""),Strategy("debug-show-desugared"),[OpenEditor,RealTime,Meta,Source]),Action(String("\"Show analyzed syntax\""),Strategy("debug-show-analyzed"),[OpenEditor,RealTime,Meta]),Action(String("\"Pretty-print\""),Strategy("pp-builder"),[Source,Meta])]),ToolbarMenu(Label(String("\"Analysis\"")),[Action(String("\"Reset and reanalyze\""),Strategy("debug-reanalyze"),[Meta]),Action(String("\"Show analysis (project)\""),Strategy("debug-project"),[OpenEditor,Meta]),Action(String("\"Show analysis (partition)\""),Strategy("debug-partition"),[OpenEditor,Meta]),Action(String("\"Show index (project)\""),Strategy("debug-index-project"),[OpenEditor,Meta]),Action(String("\"Show index (partition)\""),Strategy("debug-index-partition"),[OpenEditor,Meta]),Action(String("\"Show tasks (project)\""),Strategy("debug-task-project"),[OpenEditor,Meta]),Action(String("\"Show tasks (partition)\""),Strategy("debug-task-partition"),[OpenEditor,Meta]),Action(String("\"Show tasks (selection)\""),Strategy("debug-task-selection"),[OpenEditor,Meta])]),ToolbarMenu(Label(String("\"MiniJava\"")),[Action(String("\"Generate CIL file\""),Strategy("generate-jbc"),[OpenEditor,Meta]),Action(String("\"Generate exe\""),Strategy("generate-class"),[OpenEditor,Meta]),Action(String("\"generate exe file and run\""),Strategy("execute-class"),[OpenEditor,Meta])])]),Colorer(" Default, token-based highlighting",[ColorRule(Token(TK_KEYWORD),Attribute(ColorRGB("127","0","85"),NoColor,BOLD)),ColorRule(Token(TK_IDENTIFIER),AttributeRef("default")),ColorRule(Token(TK_STRING),AttributeRef("blue")),ColorRule(Token(TK_NUMBER),AttributeRef("darkgreen")),ColorRule(Token(TK_VAR),Attribute(ColorRGB("255","0","100"),NoColor,ITALIC)),ColorRule(Token(TK_OPERATOR),Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorRule(Token(TK_LAYOUT),Attribute(ColorRGB("63","127","95"),NoColor,ITALIC))]),Colorer(" System colors",[ColorDef("darkred",Attribute(ColorRGB("128","0","0"),NoColor,NORMAL)),ColorDef("red",Attribute(ColorRGB("255","0","0"),NoColor,NORMAL)),ColorDef("darkgreen",Attribute(ColorRGB("0","128","0"),NoColor,NORMAL)),ColorDef("green",Attribute(ColorRGB("0","255","0"),NoColor,NORMAL)),ColorDef("darkblue",Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorDef("blue",Attribute(ColorRGB("0","0","255"),NoColor,NORMAL)),ColorDef("cyan",Attribute(ColorRGB("0","255","255"),NoColor,NORMAL)),ColorDef("magenta",Attribute(ColorRGB("255","0","255"),NoColor,NORMAL)),ColorDef("yellow",Attribute(ColorRGB("255","255","0"),NoColor,NORMAL)),ColorDef("white",Attribute(ColorRGB("255","255","255"),NoColor,NORMAL)),ColorDef("black",Attribute(ColorRGB("0","0","0"),NoColor,NORMAL)),ColorDef("gray",Attribute(ColorRGB("128","128","128"),NoColor,NORMAL)),ColorDef("grey",AttributeRef("gray")),ColorDef("orange",Attribute(ColorRGB("255","165","0"),NoColor,NORMAL)),ColorDef("pink",Attribute(ColorRGB("255","105","180"),NoColor,NORMAL)),ColorDef("brown",Attribute(ColorRGB("139","69","19"),NoColor,NORMAL)),ColorDef("default",Attribute(ColorDefault,NoColor,NORMAL))]),Completions("",[CompletionProposer([],Strategy("editor-complete"))]),Completions("",[CompletionTemplateEx([Sort("Program")],CompletionPrefix(String("\"MainClass \"")),[PlaceholderWithSort("<MainClass:","MainClass"),String("\"\\n\\n\""),Cursor],[Blank]),CompletionTemplateEx([Sort("MainClass")],CompletionPrefix(String("\"class ID { public static void main (String[] ID) { Statement } }\"")),[String("\"class \""),PlaceholderWithSort("<ID:","ID"),String("\" {\\n\\tpublic static void main (String[] \""),PlaceholderWithSort("<ID:","ID"),String("\") {\\n\\t\\t\""),PlaceholderWithSort("<Statement:","Statement"),String("\"\\n\\t}\\n}\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"{ }\"")),[String("\"{\\n\\t\""),Cursor,String("\"\\n}\"")],[Blank]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"VarRef = Exp;\"")),[PlaceholderWithSort("<VarRef:","VarRef"),String("\" = \""),PlaceholderWithSort("<Exp:","Exp"),String("\";\"")],[]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"VarRef[Exp] = Exp;\"")),[PlaceholderWithSort("<VarRef:","VarRef"),String("\"[\""),PlaceholderWithSort("<Exp:","Exp"),String("\"] = \""),PlaceholderWithSort("<Exp:","Exp"),String("\";\"")],[]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"if (true) Statement else Statement\"")),[String("\"if (\""),PlaceholderWithSort("<true:","Exp"),String("\") \""),PlaceholderWithSort("<Statement:","Statement"),String("\"\\nelse \""),PlaceholderWithSort("<Statement:","Statement")],[Blank]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"while (true) {}\"")),[String("\"while (\""),PlaceholderWithSort("<true:","Exp"),String("\") \""),PlaceholderWithSort("<{}:","Statement")],[Blank]),CompletionTemplateEx([Sort("Statement")],CompletionPrefix(String("\"System.out.println(Exp);\"")),[String("\"System.out.println(\""),PlaceholderWithSort("<Exp:","Exp"),String("\");\"")],[Blank])]),Completions("",[CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"true\"")),[String("\"true\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"false\"")),[String("\"false\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"this\"")),[String("\"this\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"!Exp\"")),[String("\"!\""),PlaceholderWithSort("<Exp:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Exp + Exp\"")),[PlaceholderWithSort("<Exp:","Exp"),String("\" + \""),PlaceholderWithSort("<Exp:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Exp - Exp\"")),[PlaceholderWithSort("<Exp:","Exp"),String("\" - \""),PlaceholderWithSort("<Exp:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Exp * Exp\"")),[PlaceholderWithSort("<Exp:","Exp"),String("\" * \""),PlaceholderWithSort("<Exp:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Exp < Exp\"")),[PlaceholderWithSort("<Exp:","Exp"),String("\" < \""),PlaceholderWithSort("<Exp:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Exp && Exp\"")),[PlaceholderWithSort("<Exp:","Exp"),String("\" && \""),PlaceholderWithSort("<Exp:","Exp")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Exp.ID()\"")),[PlaceholderWithSort("<Exp:","Exp"),String("\".\""),PlaceholderWithSort("<ID:","ID"),String("\"(\""),PlaceholderWithSort("<:","Exp"),String("\")\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"new int [Exp]\"")),[String("\"new int [\""),PlaceholderWithSort("<Exp:","Exp"),String("\"]\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Exp[IndexExp]\"")),[PlaceholderWithSort("<Exp:","Exp"),String("\"[\""),PlaceholderWithSort("<IndexExp:","IndexExp"),String("\"]\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"Exp.length\"")),[PlaceholderWithSort("<Exp:","Exp"),String("\".length\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"new ID()\"")),[String("\"new \""),PlaceholderWithSort("<ID:","ID"),String("\"()\"")],[]),CompletionTemplateEx([Sort("Exp")],CompletionPrefix(String("\"(Exp)\"")),[String("\"(\""),PlaceholderWithSort("<Exp:","Exp"),String("\")\"")],[])]),Completions("",[CompletionTemplateEx([Sort("ClassDecl")],CompletionPrefix(String("\"class ID { }\"")),[String("\"class \""),PlaceholderWithSort("<ID:","ID"),String("\"  {\\n\\t\""),Cursor,String("\"\\n\\n}\"")],[Blank]),CompletionTemplateEx([Sort("ParentDecl")],CompletionPrefix(String("\"extends ID\"")),[String("\"extends \""),PlaceholderWithSort("<ID:","ID")],[]),CompletionTemplateEx([Sort("FieldDecl")],CompletionPrefix(String("\"Type ID;\"")),[PlaceholderWithSort("<Type:","Type"),String("\" \""),PlaceholderWithSort("<ID:","ID"),String("\";\"")],[]),CompletionTemplateEx([Sort("MethodDecl")],CompletionPrefix(String("\"public Type ID () { return Exp; }\"")),[String("\"public \""),PlaceholderWithSort("<Type:","Type"),String("\" \""),PlaceholderWithSort("<ID:","ID"),String("\" (\""),PlaceholderWithSort("<:","ParamDecl"),String("\") {\\n\\t\""),Cursor,String("\"\\n\\treturn \""),PlaceholderWithSort("<Exp:","Exp"),String("\";\\n}\"")],[Blank]),CompletionTemplateEx([Sort("VarDecl")],CompletionPrefix(String("\"Type ID;\"")),[PlaceholderWithSort("<Type:","Type"),String("\" \""),PlaceholderWithSort("<ID:","ID"),String("\";\"")],[]),CompletionTemplateEx([Sort("ParamDecl")],CompletionPrefix(String("\"Type ID\"")),[PlaceholderWithSort("<Type:","Type"),String("\" \""),PlaceholderWithSort("<ID:","ID")],[]),CompletionTemplateEx([Sort("Type")],CompletionPrefix(String("\"int\"")),[String("\"int\"")],[]),CompletionTemplateEx([Sort("Type")],CompletionPrefix(String("\"boolean\"")),[String("\"boolean\"")],[]),CompletionTemplateEx([Sort("Type")],CompletionPrefix(String("\"int[]\"")),[String("\"int[]\"")],[])]),Folding("",[FoldRule(SortAndConstructor(Sort("Statement"),Constructor("Block")),None),FoldRule(SortAndConstructor(Sort("Statement"),Constructor("If")),None),FoldRule(SortAndConstructor(Sort("Statement"),Constructor("While")),None)]),References("",[ReferenceRule("_",Strategy("editor-resolve")),HoverRule("_",Strategy("editor-hover"))]),Language(" Syntax properties (static defaults)",[LineCommentPrefix(String("\"//\"")),BlockCommentDefs(BlockCommentDef(String("\"/*\""),"*",String("\"*/\""))),FenceDefs([FenceDef("[","]"),FenceDef("(",")"),FenceDef("{","}")]),IndentDefs([IndentDef(String("\"=\"")),IndentDef(String("\":\""))]),IdentifierLexical(String("\"[A-Za-z0-9_]+\""))])])