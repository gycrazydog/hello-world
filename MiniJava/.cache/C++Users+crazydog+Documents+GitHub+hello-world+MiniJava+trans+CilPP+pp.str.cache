Module("pp",[Imports([Import("libstratego-gpp"),Import("lib/runtime/tmpl/pp"),Import("CilPP/Common.pp.generated"),Import("libstratego-gpp"),Import("lib/runtime/tmpl/pp"),Import("lib/CIL/CIL-parenthesize"),Import("CilPP/Common.pp.generated"),Import("CilPP/CIL.pp.generated"),Import("CilPP/CIL-Class.pp.generated"),Import("CilPP/CIL-Component.pp.generated"),Import("CilPP/CIL-Directive.pp.generated"),Import("CilPP/CIL-Field.pp.generated"),Import("CilPP/CIL-Header.pp.generated"),Import("CilPP/CIL-Method.pp.generated"),Import("CilPP/CIL-Names.pp.generated"),Import("CilPP/CIL-Numbers.pp.generated"),Import("CilPP/CIL-Statement.pp.generated"),Import("CilPP/CIL-Type.pp.generated"),Import("CilPP/CIL-WhiteSpace.pp.generated"),Import("CilPP/CIL-CilFILE.pp.generated"),Import("CilPP/CIL-Call.pp.generated")]),Rules([SDefNoArgs("pp-CIL-string",Seq(CallNoArgs(SVar("prettyprint-CilFILE")),Seq(Build(NoAnnoList(Op("V",[NoAnnoList(List([])),RootApp(Id)]))),CallT(SVar("box2text-string"),[],[NoAnnoList(Int("120"))])))),RDefNoArgs("pp-CIL-debug",Rule(Var("ast"),Var("result"),[WithClause(LChoice(Assign(Var("result"),App(CallNoArgs(SVar("pp-CIL-string")),Var("ast"))),Seq(BA(Call(SVar("bottomup"),[Call(SVar("try"),[Seq(Not(CallNoArgs(SVar("is-string"))),Seq(Not(CallNoArgs(SVar("is-list"))),Seq(Not(CallNoArgs(SVar("prettyprint-example"))),Call(SVar("debug"),[Build(NoAnnoList(Str("\"cannot pp \"")))]))))])]),Var("ast")),Assign(Var("result"),NoAnnoList(Str("\"\""))))))]))])])