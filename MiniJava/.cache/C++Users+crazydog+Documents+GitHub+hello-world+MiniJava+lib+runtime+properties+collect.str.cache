Module("runtime/properties/collect",[Imports([Import("runtime/properties/entries"),Import("runtime/properties/tasks"),Import("runtime/properties/interface"),Import("runtime/properties/query"),Import("runtime/task/core"),Import("runtime/task/tasks"),Import("runtime/nabl/collect"),Import("runtime/nabl/uri"),Import("runtime/nabl/tasks"),Import("runtime/nabl/utils"),Import("runtime/editor/origins"),Import("runtime/editor/annotations"),Import("runtime/types/collect")]),Signature([Sorts([SortNoArgs("Property")]),Constructors([OpDecl("Prop",FunType([ConstType(SortNoArgs("Property")),ConstType(SortNoArgs("Value")),ConstType(Sort("List",[SortNoArgs("Dependency")]))],ConstType(SortNoArgs("Prop"))))])]),Rules([SDefT("nabl-store-props",[],[DefaultVarDec("partition"),DefaultVarDec(ListVar("prop*"))],Where(Seq(Match(Var("name")),Seq(CallNoArgs(SVar("nabl-collect-def")),Seq(AM(CallNoArgs(SVar("nabl-uri")),Var("uri")),BA(Call(SVar("map"),[CallT(SVar("nabl-store-prop"),[],[Var("partition"),Var("uri"),Var("name")])]),Var(ListVar("prop*")))))))),SDefT("nabl-store-prop",[],[DefaultVarDec("partition"),DefaultVarDec("prop")],Where(Seq(Match(Var("name")),Seq(CallNoArgs(SVar("nabl-collect-def")),Seq(AM(CallNoArgs(SVar("nabl-uri")),Var("uri")),BA(CallT(SVar("nabl-store-prop"),[],[Var("partition"),Var("uri"),Var("name")]),Var("prop"))))))),RDefT("nabl-store-prop",[],[DefaultVarDec("partition"),DefaultVarDec("uri"),DefaultVarDec("name")],Rule(NoAnnoList(Op("Prop",[Var("kind"),Var("prop"),Var(ListVar("dep*"))])),App(CallT(SVar("new-prop"),[],[Var("partition"),Var("uri"),Var("kind"),Var("result")]),Var("name")),Assign(Var("result"),App(CallT(SVar("new-task"),[],[Var("partition"),App(CallNoArgs(SVar("dependent-tasks")),Var(ListVar("dep*")))]),NoAnnoList(Op("Id",[Var("prop")]))))))]),Rules([SDefT("nabl-annotate-properties",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*"))],Seq(Where(Seq(Assign(Var("iset"),RootApp(CallNoArgs(SVar("new-iset")))),Seq(Call(SVar("try"),[Call(SVar("nabl-custom-properties"),[LRule(RuleNoCond(Var(ListVar("p*")),App(Seq(CallT(SVar("iset-addlist"),[],[Var(ListVar("p*"))]),Fail),Var("iset"))))])]),Assign(Var(ListVar("kind*")),NoAnnoList(ListTail([NoAnnoList(Op("Type",[]))],App(CallNoArgs(SVar("iset-elements")),Var("iset")))))))),Seq(Build(NoAnnoList(Tuple([Var(ListVar("kind*")),RootApp(CallT(SVar("remove-property-annotations"),[],[Var(ListVar("kind*"))]))]))),Seq(Call(SVar("foldl"),[LChoice(CallT(SVar("nabl-annotate-property"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*"))]),CallNoArgs(SVar("Snd")))]),Where(Call(SVar("try"),[CallT(SVar("nabl-constraint"),[],[Var("lang"),Var("partition"),Var(ListVar("uri*"))])])))))),RDefT("nabl-annotate-property",[],[DefaultVarDec("lang"),DefaultVarDec("partition"),DefaultVarDec(ListVar("uri*"))],Rule(NoAnnoList(Tuple([Var("kind"),AnnoList(Var("term"),[Var(ListVar("a*"))])])),AnnoList(Var("term"),[NoAnnoList(Tuple([Var("kind"),Var("prop")])),Var(ListVar("a*"))]),Seq(Not(BA(CallT(SVar("get-property-task"),[],[Var("kind")]),Var("term"))),Assign(Var("prop"),App(CallT(SVar("create-property-task"),[],[Var("partition"),Var("kind")]),Var("term"))))))]),Strategies([SDefT("nabl-prop-calc",[],[DefaultVarDec("partition"),DefaultVarDec(ListVar("dep*"))],Seq(Where(Assign(Var(ListVar("all-dep*")),App(CallNoArgs(SVar("union")),NoAnnoList(Tuple([App(CallNoArgs(SVar("dependent-tasks")),Var(ListVar("dep*"))),RootApp(CallNoArgs(SVar("dependent-tasks")))]))))),BA(CallT(SVar("new-task"),[],[Var("partition"),Var(ListVar("all-dep*"))]),NoAnnoList(Op("Id",[RootApp(Id)]))))),SDefT("nabl-prop-list",[],[DefaultVarDec("partition"),DefaultVarDec(ListVar("dep*"))],Seq(Where(Assign(Var(ListVar("all-dep*")),App(CallNoArgs(SVar("union")),NoAnnoList(Tuple([App(CallNoArgs(SVar("dependent-tasks")),Var(ListVar("dep*"))),RootApp(CallNoArgs(SVar("dependent-tasks")))]))))),BA(CallT(SVar("new-task"),[],[Var("partition"),Var(ListVar("all-dep*"))]),NoAnnoList(Op("Combine",[RootApp(Id)]))))),SDefT("nabl-prop-lookup",[],[DefaultVarDec("kind"),DefaultVarDec("partition"),DefaultVarDec(ListVar("dep*"))],LChoice(Seq(CallNoArgs(SVar("get-annos")),Call(SVar("fetch-elem"),[Match(NoAnnoList(Tuple([Var("kind"),RootApp(Id)])))])),Seq(Where(Assign(Var(ListVar("all-dep*")),App(CallNoArgs(SVar("union")),NoAnnoList(Tuple([App(CallNoArgs(SVar("dependent-tasks")),Var(ListVar("dep*"))),RootApp(CallNoArgs(SVar("dependent-tasks")))]))))),Seq(BA(CallT(SVar("new-task"),[],[Var("partition"),Var(ListVar("all-dep*"))]),NoAnnoList(Op("CollectDefs",[RootApp(Id)]))),BA(CallT(SVar("new-task"),[],[Var("partition")]),NoAnnoList(Op("PropsLookup",[Var("kind"),RootApp(Id)]))))))),SDefT("nabl-prop-match",[],[DefaultVarDec("kind"),DefaultVarDec("partition"),DefaultVarDec("relation"),DefaultVarDec("expected")],Seq(Match(Var("actual")),Seq(Assign(Var(ListVar("expected*")),App(CallNoArgs(SVar("try-make-list")),Var("expected"))),Seq(Assign(Var(ListVar("check*")),App(Call(SVar("map"),[BA(CallT(SVar("new-task"),[],[Var("partition")]),NoAnnoList(Op("PropCheck",[Var("kind"),Var("relation"),Var("actual"),RootApp(Id)])))]),Var(ListVar("expected*")))),BA(CallT(SVar("new-task"),[],[Var("partition"),App(CallNoArgs(SVar("dependent-tasks")),Var(ListVar("check*")))]),NoAnnoList(Op("Choice",[Var(ListVar("check*"))])))))))]),Rules([RDefT("create-property-task",[],[DefaultVarDec("ctx"),DefaultVarDec("kind")],Rule(Var("x"),App(CallT(SVar("nabl-prop-calc"),[],[Var("ctx"),Var(ListVar("t*"))]),Var(ListVar("t*"))),Seq(BA(CallNoArgs(SVar("is-list")),Var("x")),Assign(Var(ListVar("t*")),App(Call(SVar("map"),[CallT(SVar("get-or-create-property-task"),[],[Var("ctx"),Var("kind")])]),Var("x"))))))]),Rules([SDefT("remove-property-annotations",[],[DefaultVarDec(ListVar("kind*"))],Seq(Build(NoAnnoList(Tuple([Var(ListVar("kind*")),RootApp(Id)]))),Call(SVar("foldl"),[CallNoArgs(SVar("remove-property-annotation"))]))),RDefNoArgs("remove-property-annotation",RuleNoCond(NoAnnoList(Tuple([Var("kind"),Var("term")])),App(Call(SVar("remove-annotations"),[Match(NoAnnoList(Tuple([Var("kind"),Wld])))]),Var("term"))))])])