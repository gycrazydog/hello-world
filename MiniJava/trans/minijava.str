module minijava

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	assignment1/MiniJava
	assignment1/pp
	lib/editor-common.generated
	lib/runtime/analysis/-
	lib/runtime/nabl/-
	lib/runtime/properties/-
	lib/runtime/types/-
	lib/runtime/task/-
	lib/runtime/index/-
	editor/outline
  editor/builders
  analysis/desugar
  trans/namespace
    trans/Typing-Rules/OpExpressions
  trans/Custom-Constraints/Duplicates-error
  trans/Custom-Constraints/Hiding-warning
  trans/Custom-Constraints/MainClass-error
  trans/Custom-Constraints/Unresolved-error
  trans/Custom-Constraints/Statement-Type-error
  trans/Typing-Rules/Literals
  trans/Typing-Rules/Method
  trans/Typing-Rules/Reference

  
rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-single-default-interface = 
		analysis-single-default(id, id, id|<language>)
	analysis-multiple-default-interface = 
		analysis-multiple-default(parse-file <+ !(), id, id, id|<language>, <project-path>)
	
  // analysis-single-default-interface = 
  //   analysis-single-default(desugar-all, id, id|<language>)
  // analysis-multiple-default-interface = 
  //   analysis-multiple-default(parse-file <+ !(), desugar-all, id, id|<language>, <project-path>)

	editor-save = analysis-save-default(|<language>)

rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) -> <get-type> target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast

rules // Debugging
  
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path

  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <desugar-all> selected
  
  desugar-all = fail
      
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path

  debug-project =
    analysis-debug-project(|<language>)

  debug-partition =
    analysis-debug-partition(|<language>)
     
  debug-index-project =
    analysis-debug-index-project(|<language>)

  debug-index-partition =
    analysis-debug-index-partition(|<language>)
     
  debug-task-project =
    analysis-debug-task-project(|<language>)

  debug-task-partition =
    analysis-debug-task-partition(|<language>)

  debug-task-selection =
    analysis-debug-task-selection(|<language>)

  	
  debug-reanalyze = 
  	analysis-debug-reanalyze(|<language>)
