module codegen/exp

imports
  
  runtime/editor/origins

  trans/codegen/-
  runtime/types/-
  runtime/nabl/-
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/CIL/CIL
  rules
  	
  	exp-to-jbc: IntValue(i) -> [LDC(i)]
	exp-to-jbc: True()->[LDC1()]
	exp-to-jbc: False()->[LDC1()]
	exp-to-jbc:This()->[LDARG(0)]

	exp-to-jbc:
		Call(exp,ID,ps)->r*
		where
			
			(p,r):=<get-type>ID;
			m:=<nabl-uri>ID;
			uri:=<nabl-uri-parent>m;
			class-name:=<nabl-uri-name>uri;
			e*:=<exp-to-jbc>exp;
			typet:= <type-to-jbc>r;
			<debug(!"type is")>typet;
			ps-exp*:=<parameters-to-jbc>ps;
			method-name:=<nabl-uri-name><nabl-uri>ID;
			<debug(!"The types of parameters are ")><map(type-to-jbc)>p;
		r*:=CallInstance(typet, None(), Object(class-name), method-name, <map(type-to-jbc)>p)
		
        
     exp-to-jbc:
        NewObject(ID)->r
        where
      r:=NewObj(Object(<strip-annos>ID), [])
      
      /*  
	exp-to-jbc: BinExp(e,e1,e2)   ->result*
	where
		op*:=<op-to-jbc>e;
	result*:=  [<exp-to-jbc>e1, <exp-to-jbc>e2,op* ]
	//Plus
	op-to-jbc:
		Plus()->[IADD()]
		op-to-jbc:
	 Minus()->[ISUB()]
	op-to-jbc:
		Times()->[IMUL()]
	op-to-jbc:
		Subscript()->[IALOAD()]
		op-to-jbc: Lt()->[IF_ICMPLT(LabelRef(Label_LT)),ICONST_0(),GOTO(LabelRef(Label_END)),JBCLabel(Label_LT),ICONST_1(),JBCLabel(Label_END)]
	  			where
	  				Label_LT := <newname>"Label";
	  				Label_END := <newname>"Label"
 	op-to-jbc: Not()->[ICONST_1(),IXOR()]
    op-to-jbc: NewArray()->[NEWARRAY(IntName())]
    where
    	<debug(!"new array!")>1
	op-to-jbc: Length()->[ARRAYLENGTH()]
where
    	<debug(!"array length!")>1

     
	exp-to-jbc: BinExp(And(),e1,e2)   ->result*
	where
		label:=<newname>"Label";
  			label2:=<newname>"Label";
	
	result*:=[<exp-to-jbc>e1
	,IFEQ(LabelRef(label)),
	 ICONST_1()
	,<exp-to-jbc>e2
	,IAND()
	 ,GOTO(LabelRef(label2))
	 ,JBCLabel(label)
	  ,ICONST_0()
	  ,JBCLabel(label2)
	  ]
	  
	  	  exp-to-jbc: UnExp(unop,exp) -> [result*,opresult*]
	  				where
	  					result* := <exp-to-jbc>exp;
	  					opresult* := <op-to-jbc>unop
*/
exp-to-jbc:
		
	FieldRef(x)->result*
	where
		class-name:=<nabl-uri-name><nabl-uri-parent><nabl-uri>x;
		field-name:=<nabl-uri-name><nabl-uri>x;
	result*:=[LDARG("0")
          , LDFLD(Int(), class-name, field-name)]
		
		
        

exp-to-jbc:
	VarRef(x)->result*
	where
			i:=<get-var-index>x;
		load-command*:=<load-command(|i)><get-type>x;
		<debug(!"The index fetched is ")>i;
		result*:=[load-command*]