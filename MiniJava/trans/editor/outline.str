module editor/outline

imports
  assignment1/MiniJava
  runtime/editor/outline-library
  runtime/editor/origins
 // editor/MiniJava-Outliner.generated

rules
  
  outline-expand-to-level = !3
  //  outline = simple-label-outline(to-outline-label)
  // // 
  //  to-outline-label = fail
  outline = custom-label-outline(to-outline-label, to-outline-node)
rules
	
	 to-outline-node: 
   	<literals-to-outline-label(|context-free-syntax(["public static void main"]))> -> Node($[mainmethod],[])
  	//context-free-syntax(["public","static","void","main"])->Node($[mainmethod],[])
	
  // Program     : MainClass * List(ClassDecl) -> Program
  to-outline-label: 
  Program(_,_) -> $[[file-name]]
   where
   	full-path := <origin-relative-path>;
   	token-list := <string-tokenize(|['/'])> full-path;
   	file-name := <last> token-list
  
  //MainClass   : ID * ID * Statement -> MainClass
  to-outline-label:
  	MainClass(v,_,_) -> $[mainclass [v]]
    to-outline-node: MainClass(v,_,_) -> Node(v, [Node("mainmethod",[])])	

  to-outline-label: 
  Var(t, v) -> $[var [v]: [t']] 
  where 
    t' := <pp> t
  //to-outline-node: Var(_,v) -> Node(v, [])	
  
  		
  
  //Method      : Type * ID * List(ParamDecl) * List(VarDecl) * List(Statement) * Exp -> MethodDecl
  to-outline-label:
  Method(t,v,p,_,_,_) -> $[method [v] ([p']) :[t']]
  where
  	t' := <pp> t;
  	p' := <s> p
    
  //Type * ID -> FieldDecl
  to-outline-label:
  Field(t,v) -> $[field [v]: [t']]
  where
  	t' := <pp> t
  
  // Class       : ID * ParentDecl * List(FieldDecl) * List(MethodDecl) -> ClassDecl
   to-outline-label: 
   Class(v,p,_,_) -> $[[v]: extends [p'] ]
   where
   	p':= <pc> p
 
  
  
rules
     
   pp: Bool()       -> $[boolean]
   pp: ClassType(c) -> $[class]
   pp: Int()        -> $[int]
   pp: IntArray()   -> <concat-strings> ["int","[","]"]
   pc: None() -> $[Object]
   pc: Parent(v) -> $[[v]]
   
   s: [x]->[<s2> x]
   s: [x|xs]->[<s1>x | <s> xs]
   s1 : Param(x,y) -> <concat-strings> [x',","]
   where
   	x' := <pp> x
   s2 : Param(x,y) -> $[[x']]
   where
   	x' := <pp> x
   	