Module("minijava",[Imports([Import("libstratego-lib"),Import("libstratego-aterm"),Import("libstratego-gpp"),Import("editor-common.generated"),ImportWildcard("lib/runtime/analysis"),ImportWildcard("lib/runtime/nabl"),ImportWildcard("lib/runtime/types"),ImportWildcard("lib/runtime/task"),ImportWildcard("lib/runtime/properties"),ImportWildcard("lib/CIL"),ImportWildcard("trans/codegen"),ImportWildcard("milestone1"),ImportWildcard("milestone2"),ImportWildcard("trans/CilPP")]),Rules([SDefNoArgs("editor-analyze",CallNoArgs(SVar("analysis-default-editor"))),SDefNoArgs("analysis-single-default-interface",CallT(SVar("analysis-single-default"),[CallNoArgs(SVar("desugar-all")),CallNoArgs(SVar("desugar-after-all")),Id],[RootApp(CallNoArgs(SVar("language")))])),SDefNoArgs("analysis-multiple-default-interface",CallT(SVar("analysis-multiple-default"),[LChoice(CallNoArgs(SVar("parse-file")),Build(NoAnnoList(Tuple([])))),CallNoArgs(SVar("desugar-all")),CallNoArgs(SVar("desugar-after-all")),Id],[RootApp(CallNoArgs(SVar("language"))),RootApp(CallNoArgs(SVar("project-path")))])),SDefNoArgs("editor-save",Seq(CallT(SVar("analysis-save-default"),[],[RootApp(CallNoArgs(SVar("language")))]),CallNoArgs(SVar("generate-jbc"))))]),Rules([RDefNoArgs("editor-resolve",Rule(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),Var("definition"),Assign(Var("definition"),App(CallT(SVar("analysis-resolve"),[],[RootApp(CallNoArgs(SVar("language"))),Var("project-path"),Var("path")]),Var("node"))))),RDefNoArgs("editor-hover",Rule(NoAnnoList(Tuple([Var("target"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),Var("hover"),Seq(Assign(Var("ty"),App(CallNoArgs(SVar("get-type")),Var("target"))),Assign(Var("hover"),App(CallNoArgs(SVar("pp-type")),Var("ty")))))),RDefNoArgs("editor-complete",Rule(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),Var("proposals"),Assign(Var("proposals"),App(CallT(SVar("analysis-propose-completions"),[],[RootApp(CallNoArgs(SVar("language"))),Var("project-path"),Var("path")]),Var("ast")))))]),Rules([RDefNoArgs("mkpth",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("dir"),App(CallNoArgs(SVar("dir")),Var("path"))),BA(CallNoArgs(SVar("mkdir")),Var("dir")))),WhereClause(BA(CallNoArgs(SVar("refresh-workspace-file")),Var("dir")))])),RDefNoArgs("dir",Rule(Var("path"),Var("dir"),Seq(Assign(Var("length"),App(CallNoArgs(SVar("string-length")),Var("path"))),Seq(Assign(Var("l"),App(CallNoArgs(SVar("subti")),NoAnnoList(Tuple([Var("length"),NoAnnoList(Int("2"))])))),Assign(Var("dir"),App(Call(SVar("string-as-chars"),[CallT(SVar("take"),[],[Var("l")])]),Var("path"))))))),RDefNoArgs("write-file",Rule(NoAnnoList(Tuple([Var("path"),Var("content")])),NoAnnoList(Op("None",[])),Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"j\""))]),Var("path"))),Seq(Assign(Var("file"),App(CallNoArgs(SVar("fopen")),NoAnnoList(Tuple([Var("filename"),NoAnnoList(Str("\"w\""))])))),Seq(BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([Var("content"),Var("file")]))),Seq(BA(CallNoArgs(SVar("fclose")),Var("file")),BA(CallNoArgs(SVar("refresh-workspace-file")),Var("filename")))))))),RDefNoArgs("generate-jbc",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Op("None",[])),Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"il\""))]),Var("path"))),Seq(Assign(Var("temp"),App(CallNoArgs(SVar("program-to-jbc")),Var("selected"))),Seq(Assign(Var("result"),App(CallNoArgs(SVar("pp-cil-string")),Var("temp"))),Seq(Assign(Var("file"),App(CallNoArgs(SVar("fopen")),NoAnnoList(Tuple([Var("filename"),NoAnnoList(Str("\"w\""))])))),Seq(BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([Var("result"),Var("file")]))),Seq(BA(CallNoArgs(SVar("fclose")),Var("file")),BA(CallNoArgs(SVar("refresh-workspace-file")),Var("filename")))))))))),RDefNoArgs("generate-class",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Op("None",[])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"il\""))]),Var("path"))),Seq(Assign(Var("temp"),App(CallNoArgs(SVar("program-to-jbc")),Var("selected"))),Seq(Assign(Var("result"),App(CallNoArgs(SVar("pp-cil-string")),Var("temp"))),Seq(Assign(Var("file"),App(CallNoArgs(SVar("fopen")),NoAnnoList(Tuple([Var("filename"),NoAnnoList(Str("\"w\""))])))),Seq(BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([Var("result"),Var("file")]))),Seq(BA(CallNoArgs(SVar("fclose")),Var("file")),Seq(BA(CallNoArgs(SVar("refresh-workspace-file")),Var("filename")),Seq(Assign(Var("dir"),NoAnnoList(Str("\"C:/Windows/Microsoft.NET/Framework/v4.0.30319/ilasm\""))),Seq(BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"exe\"")))]),Var("filename")),Seq(Assign(Var("cfname"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"exe\""))]),Var("filename"))),Seq(BA(Call(SVar("try"),[CallNoArgs(SVar("call"))]),NoAnnoList(Tuple([Var("dir"),NoAnnoList(List([NoAnnoList(Str("\"/exe\"")),NoAnnoList(StringQuotation1("			                            ",[StringEscape1("			                            ",RootApp(CallNoArgs(SVar("project-path")))),QStr("/"),StringEscape1("			                                             ",Var("filename"))])),NoAnnoList(StringQuotation1("			                                                           ",[QStr("/output="),StringEscape1("			                                                                   ",RootApp(CallNoArgs(SVar("project-path")))),QStr("/"),StringEscape1("			                                                                                    ",Var("cfname"))]))]))]))),BA(CallNoArgs(SVar("refresh-workspace-file")),Var("cfname"))))))))))))))])),RDefNoArgs("execute-class",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"il\""))]),Var("path"))),Seq(Assign(Var("temp"),App(Seq(CallNoArgs(SVar("program-to-jbc")),Call(SVar("debug"),[Build(NoAnnoList(Str("\"a: \"")))])),Var("ast"))),Seq(Assign(Var("result"),App(Seq(CallNoArgs(SVar("pp-CIL-debug")),Call(SVar("debug"),[Build(NoAnnoList(Str("\"b: \"")))])),Var("temp"))),Seq(Assign(Var("file"),App(CallNoArgs(SVar("fopen")),NoAnnoList(Tuple([Var("filename"),NoAnnoList(Str("\"w\""))])))),Seq(BA(CallNoArgs(SVar("fputs")),NoAnnoList(Tuple([Var("result"),Var("file")]))),Seq(BA(CallNoArgs(SVar("fclose")),Var("file")),Seq(BA(CallNoArgs(SVar("refresh-workspace-file")),Var("filename")),Seq(Assign(Var("dir"),NoAnnoList(Str("\"C:/Windows/Microsoft.NET/Framework/v4.0.30319/ilasm\""))),Seq(BA(Call(SVar("debug"),[Build(NoAnnoList(Str("\"exe\"")))]),Var("filename")),Seq(Assign(Var("cfname"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"exe\""))]),Var("filename"))),Seq(BA(Call(SVar("try"),[CallNoArgs(SVar("call"))]),NoAnnoList(Tuple([Var("dir"),NoAnnoList(List([NoAnnoList(Str("\"/exe\"")),NoAnnoList(StringQuotation1("		 	                            ",[StringEscape1("		 	                            ",RootApp(CallNoArgs(SVar("project-path")))),QStr("/"),StringEscape1("		 	                                             ",Var("filename"))])),NoAnnoList(StringQuotation1("		 	                                                           ",[QStr("/output="),StringEscape1("		 	                                                                   ",RootApp(CallNoArgs(SVar("project-path")))),QStr("/"),StringEscape1("		 	                                                                                    ",Var("cfname"))]))]))]))),Seq(BA(CallNoArgs(SVar("refresh-workspace-file")),Var("cfname")),Seq(Assign(Var("rundir"),App(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([Var("project-path"),NoAnnoList(Str("\"/\"")),Var("cfname")])))),BA(Call(SVar("try"),[CallNoArgs(SVar("call"))]),NoAnnoList(Tuple([Var("rundir"),NoAnnoList(List([]))])))))))))))))))))]))]),Rules([RDefNoArgs("debug-show-aterm",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"aterm\""))]),Var("path"))),Assign(Var("result"),App(CallNoArgs(SVar("program-to-jbc")),Var("selected")))))])),RDefNoArgs("debug-show-analyzed",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),[WithClause(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"analyzed.aterm\""))]),Var("path"))),Assign(Var("result"),Var("selected"))))])),SDefNoArgs("debug-index-project",CallT(SVar("analysis-debug-index-project"),[],[RootApp(CallNoArgs(SVar("language")))])),SDefNoArgs("debug-index-partition",CallT(SVar("analysis-debug-index-partition"),[],[RootApp(CallNoArgs(SVar("language")))])),SDefNoArgs("debug-task-project",CallT(SVar("analysis-debug-task-project"),[],[RootApp(CallNoArgs(SVar("language")))])),SDefNoArgs("debug-task-partition",CallT(SVar("analysis-debug-task-partition"),[],[RootApp(CallNoArgs(SVar("language")))])),SDefNoArgs("debug-task-selection",CallT(SVar("analysis-debug-task-selection"),[],[RootApp(CallNoArgs(SVar("language")))])),SDefNoArgs("debug-project",CallT(SVar("analysis-debug-project"),[],[RootApp(CallNoArgs(SVar("language")))])),SDefNoArgs("debug-partition",CallT(SVar("analysis-debug-partition"),[],[RootApp(CallNoArgs(SVar("language")))])),SDefNoArgs("debug-reanalyze",CallT(SVar("analysis-debug-reanalyze"),[],[RootApp(CallNoArgs(SVar("language")))]))]),Strategies([ExtSDef("execute-java",[],[DefaultVarDec("path")])])])