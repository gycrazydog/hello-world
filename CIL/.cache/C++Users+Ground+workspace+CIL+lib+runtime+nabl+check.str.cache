Module("runtime/nabl/check",[Imports([Import("runtime/nabl/resolve"),Import("runtime/nabl/collect"),Import("runtime/nabl/query"),Import("runtime/nabl/tasks"),Import("runtime/nabl/entries"),Import("runtime/nabl/interface"),Import("runtime/nabl/uri"),Import("runtime/nabl/utils"),Import("runtime/task/core"),Import("runtime/task/messages"),Import("runtime/task/tasks")]),Rules([RDefT("nabl-unresolved-task",[],[DefaultVarDec("partition"),DefaultVarDec("task")],Rule(Var("name"),Var("name"),[WhereClause(Not(CallNoArgs(SVar("nabl-check-disable-unresolved")))),WithClause(BA(Seq(CallNoArgs(SVar("nabl-fix-name")),CallT(SVar("task-create-error-on-failure"),[],[Var("partition"),Var("task"),NoAnnoList(Str("\"Unresolved reference\""))])),Var("name")))])),RDefT("nabl-duplicate-task",[],[DefaultVarDec("partition"),DefaultVarDec("unique")],Rule(Var("name"),Var("name"),[WhereClause(Seq(Assign(Var("uri"),App(CallNoArgs(SVar("nabl-uri")),Var("name"))),Seq(Assign(Var("ns"),App(CallNoArgs(SVar("nabl-uri-namespace")),Var("uri"))),Not(BA(CallT(SVar("nabl-check-disable-duplicate"),[],[Var("uri"),Var("ns")]),Var("name")))))),WithClause(IfThen(Assign(NoAnnoList(Op("Unique",[])),Var("unique")),Seq(Assign(Var("uri'"),App(CallNoArgs(SVar("nabl-uri-parent")),Var("uri"))),Seq(Assign(Var("resolve"),App(CallT(SVar("new-task"),[],[Var("partition")]),NoAnnoList(Op("ResolveDefs",[Var("uri'"),Var("ns"),Var("name"),NoAnnoList(List([]))])))),BA(CallT(SVar("task-create-error-on-multiple"),[],[Var("partition"),Var("resolve"),NoAnnoList(Str("\"Duplicate definition\""))]),Var("name"))))))])),RDefT("nabl-hiding-task",[],[DefaultVarDec("partition")],Rule(Var("name"),Var("name"),[WhereClause(Seq(Assign(Var("uri"),App(CallNoArgs(SVar("nabl-uri")),Var("name"))),Seq(Assign(Var("ns"),App(CallNoArgs(SVar("nabl-uri-namespace")),Var("uri"))),Not(BA(CallT(SVar("nabl-check-disable-hiding"),[],[Var("uri"),Var("ns")]),Var("name")))))),WhereClause(Seq(CondChoice(Assign(Var(ListVar("inverse-alias*")),App(CallNoArgs(SVar("nabl-get-all-inverse-aliasses")),Var("uri"))),Assign(Var(ListVar("uri*")),App(Call(SVar("map"),[Seq(CallNoArgs(SVar("nabl-uri-parent")),CallNoArgs(SVar("nabl-uri-parent")))]),Var(ListVar("inverse-alias*")))),Assign(Var(ListVar("uri*")),App(Seq(CallNoArgs(SVar("nabl-uri-parent")),Seq(CallNoArgs(SVar("nabl-uri-parent")),Build(NoAnnoList(List([RootApp(Id)]))))),Var("uri")))),Seq(Assign(Var(ListVar("task*")),App(Call(SVar("map"),[CallT(SVar("nabl-use-subtask"),[],[Var("partition"),Var("ns"),App(CallNoArgs(SVar("nabl-fix-name")),Var("name")),NoAnnoList(List([])),NoAnnoList(Op("All",[]))])]),Var(ListVar("uri*")))),Seq(Assign(Var("task"),App(CallT(SVar("new-task"),[],[Var("partition")]),NoAnnoList(Op("Choice",[Var(ListVar("task*"))])))),BA(CallT(SVar("task-create-error-on-success"),[],[Var("partition"),Var("task"),NoAnnoList(Str("\"Declaration hides previous definition\""))]),Var("name"))))))])),SDefT("nabl-constraint",[],[DefaultVarDec("partition")],CallT(SVar("nabl-hiding-task"),[],[Var("partition")]))]),Rules([SDefNoArgs("nabl-is-unresolved",Seq(Match(Var("node")),Seq(CallNoArgs(SVar("has-annos")),Seq(CallNoArgs(SVar("get-annos")),Seq(Where(CallNoArgs(SVar("nabl-has-reference"))),Not(CallNoArgs(SVar("nabl-collect-one-resolved-def")))))))),SDefNoArgs("nabl-get-ambiguities",Seq(CallNoArgs(SVar("nabl-collect-all-resolved-defs")),Seq(Call(SVar("mapconcat"),[CallNoArgs(SVar("nabl-get-all-aliases"))]),Seq(Call(SVar("filter"),[Seq(CallNoArgs(SVar("nabl-uri")),CallNoArgs(SVar("nabl-uri-parent")))]),Seq(CallNoArgs(SVar("make-set")),Where(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("length"))),NoAnnoList(Int("1"))]))))))))),SDefNoArgs("nabl-get-duplicate-definitions",Seq(CallNoArgs(SVar("has-annos")),Seq(CallNoArgs(SVar("get-annos")),Seq(Call(SVar("collect-one"),[Match(NoAnnoList(Op("Def",[Wld])))]),Seq(CallNoArgs(SVar("nabl-get-all-definitions")),Seq(CallNoArgs(SVar("make-set")),Where(BA(CallNoArgs(SVar("gt")),NoAnnoList(Tuple([RootApp(CallNoArgs(SVar("length"))),NoAnnoList(Int("1"))]))))))))))])])