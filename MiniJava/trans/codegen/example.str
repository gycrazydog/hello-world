module codegen/example

imports
  
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/jasmin/JasminXT
  
rules
	to-jbc = program-to-jbc + class-to-jbc + stmt-to-jbc + exp-to-jbc
	exp-to-jbc: IntValue(i) -> [LDC(i)]
  program-to-jbc:Program(m,c)->result
     where
     	result:=<class-to-jbc>m
 /*
 JBCFile(
  JBCHeader(
    None()
  , None()
  , JBCClass([PUBLIC()], "example/HelloWorld")
  , JBCSuper("java/lang/Object")
  , []
  , None()
  , None()
  , None()
  )
, []
, [ JBCMethod(
      [PUBLIC()]
    , Init()
    , JBCMethodDesc([], Void())
    , [ ALOAD_0()
      , INVOKESPECIAL(
          JBCMethodRef(CRef("java/lang/Object"), MRef(Init()), JBCMethodDesc([], Void()))
        )
      , RETURN()
      ]
    )
  , JBCMethod(
      [PUBLIC(), STATIC()]
    , "main"
    , JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())
    , [ JBCLimitStack("2")
      , GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )
      , LDC("42")
      , INVOKEVIRTUAL(
          JBCMethodRef(
            CRef("java/io/PrintStream")
          , MRef("println")
          , JBCMethodDesc([Int()], Void())
          )
        )
      , RETURN()
      ]
    )
  ]
)
 */
  class-to-jbc:MainClass(n,id2,s)->r
  where
   	  //<strip-annos>n
   	   header:=JBCHeader(
    None()
  , None()
  , JBCClass([PUBLIC()], <strip-annos>n)
  , JBCSuper("java/lang/Object")
  , []
  , None()
  , None()
  , None()
  );
  statement*:=<stmt-to-jbc>s;
  list*:=[ JBCLimitStack("2")
      ,statement* 
      , RETURN()
      ]
  ;
   	 method:=[ JBCMethod(
      [PUBLIC()]
    , Init()
    , JBCMethodDesc([], Void())
    , [ ALOAD_0()
      , INVOKESPECIAL(
          JBCMethodRef(CRef("java/lang/Object"), MRef(Init()), JBCMethodDesc([], Void()))
        )
      , RETURN()
      ]
    )
  , JBCMethod(
      [PUBLIC(), STATIC()]
    , "main"
    , JBCMethodDesc([Array(Reference(CRef("java/lang/String")))], Void())
    , list*
    )
  ];
   	    r:=JBCFile(header,[],method)
   	      	
     	
  
  
  
   	   
   stmt-to-jbc: Print(s)->result*
   where
   	static*:=[GETSTATIC(
          JBCFieldRef(
            CRef("java/lang/System")
          , FRef("out")
          , JBCFieldDesc(Reference(CRef("java/io/PrintStream")))
          )
        )];
        invoke*:=[INVOKEVIRTUAL(
          JBCMethodRef(
          	CRef("java/io/PrintStream")
          , MRef("println")
          , JBCMethodDesc([Int()], Void())
          )
        )];
        op*:=<exp-to-jbc>s;
   	  result*:=[static*, op*, invoke*]
  
  
  	 