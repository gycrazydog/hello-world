Module("runtime/task/tasks",[Imports([Import("runtime/task/core"),Import("runtime/task/messages"),Import("runtime/task/interface")]),Signature([Constructors([OpDecl("Id",FunType([ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Instruction")))),OpDecl("Combine",FunType([ConstType(Sort("List",[SortNoArgs("Term")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Collect",FunType([ConstType(Sort("List",[SortNoArgs("Term")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Choice",FunType([ConstType(Sort("List",[Sort("List",[SortNoArgs("Term")])]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Sequence",FunType([ConstType(Sort("List",[SortNoArgs("Term")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Rewrite",FunType([ConstType(SortNoArgs("ID")),ConstType(SortNoArgs("Term"))],ConstType(SortNoArgs("Instruction")))),OpDecl("Index",FunType([ConstType(SortNoArgs("Int")),ConstType(Sort("List",[SortNoArgs("Term")]))],ConstType(SortNoArgs("Instruction")))),OpDecl("Length",FunType([ConstType(Sort("List",[SortNoArgs("Term")]))],ConstType(SortNoArgs("Instruction"))))])]),Rules([SDefT("perform-cyclic-task",[],[DefaultVarDec("nr")],Fail),RDefT("perform-task",[],[DefaultVarDec("nr")],RuleNoCond(NoAnnoList(Tuple([Var("instruction"),NoAnnoList(Str("\"cyclic\""))])),App(LChoice(CallT(SVar("perform-cyclic-task"),[],[Var("nr")]),CallT(SVar("perform-task"),[],[Var("nr")])),Var("instruction"))))]),Rules([SDefNoArgs("task-is-combinator",Match(NoAnnoList(Op("Choice",[Wld])))),SDefT("perform-task",[],[DefaultVarDec("nr")],Match(NoAnnoList(Op("Choice",[RootApp(Call(SVar("fetch-elem"),[Not(Match(NoAnnoList(List([]))))]))]))))]),Rules([SDefNoArgs("task-is-combinator",Match(NoAnnoList(Op("Sequence",[Wld])))),SDefT("perform-task",[],[DefaultVarDec("nr")],Match(NoAnnoList(Op("Sequence",[RootApp(Seq(Not(Call(SVar("fetch-elem"),[Match(NoAnnoList(List([])))])),CallNoArgs(SVar("last"))))]))))]),Rules([SDefT("perform-task",[],[DefaultVarDec("nr")],Match(NoAnnoList(Op("Id",[RootApp(CallNoArgs(SVar("MkSingleton")))]))))]),Rules([SDefNoArgs("task-is-combinator",Match(NoAnnoList(Op("Combine",[Wld])))),SDefT("perform-task",[],[DefaultVarDec("nr")],Seq(Match(NoAnnoList(Op("Combine",[RootApp(Call(SVar("map"),[LChoice(CallNoArgs(SVar("is-list")),CallNoArgs(SVar("MkSingleton")))]))]))),CallNoArgs(SVar("concat"))))]),Rules([SDefNoArgs("task-is-combinator",Match(NoAnnoList(Op("Collect",[Wld])))),SDefT("perform-task",[],[DefaultVarDec("nr")],Seq(Match(NoAnnoList(Op("Collect",[RootApp(Call(SVar("map"),[LChoice(CallNoArgs(SVar("is-list")),CallNoArgs(SVar("MkSingleton")))]))]))),Seq(CallNoArgs(SVar("concat")),CallNoArgs(SVar("MkSingleton")))))]),Rules([SDefT("perform-task",[],[DefaultVarDec("nr")],Seq(Match(NoAnnoList(Op("Rewrite",[Var("key"),Var("term")]))),BA(Seq(CallNoArgs(SVar("task-rewrite")),CallNoArgs(SVar("MkSingleton"))),NoAnnoList(Tuple([Var("key"),Var("term")])))))]),Rules([SDefT("perform-task",[],[DefaultVarDec("nr")],Seq(Match(NoAnnoList(Op("Index",[Var("i"),RootApp(CallT(SVar("index"),[],[Var("i")]))]))),CallNoArgs(SVar("MkSingleton")))),SDefT("perform-task",[],[DefaultVarDec("nr")],Seq(Match(NoAnnoList(Op("Length",[RootApp(CallNoArgs(SVar("length")))]))),CallNoArgs(SVar("MkSingleton"))))])])