module minijava

imports
    
  libstratego-lib
  libstratego-aterm
  libstratego-gpp
  editor-common.generated

  lib/runtime/analysis/-
  lib/runtime/nabl/-
  lib/runtime/types/-
  lib/runtime/task/-
  lib/runtime/properties/-
  //lib/jasmin/-
  lib/CIL/-
  trans/codegen/-
 
  milestone1/-
  milestone2/-
  trans/CilPP/-
rules // Analysis
  
  editor-analyze = analysis-default-editor
  
  analysis-single-default-interface = 
    analysis-single-default(desugar-all, desugar-after-all, id|<language>)
  analysis-multiple-default-interface = 
    analysis-multiple-default(parse-file <+ !(), desugar-all, desugar-after-all, id|<language>, <project-path>)
  
  editor-save = analysis-save-default(|<language>);generate-jbc

rules // Editor services
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path, path)> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> hover
    where
    	ty    := <get-type> target
    ; hover := <pp-type> ty
  
  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <analysis-propose-completions(|<language>, project-path, path)> ast
     
rules // Builders
	//class-name: JBCFile(JBCHeader(_, _, JBCClass(_, name), _, _, _, _, _), _, _) -> name
	
	/*execute-class:
		(selected, position, ast, path, project-path) -> None()
		with
			temp:=<pp-jasminxt-string><program-to-jbc>selected ;
			<write-file>(path,temp);
			parentdir := <concat-strings> [project-path, "/","bin"] ;
			dir:=<concat-strings> [project-path, "/","bin","/", <class-name><program-to-jbc> ast] ;
			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", parentdir, <guarantee-extension(|"j")>path]);
		    //<try(call)> ("java", dir)
		    <try(call)> ("java", ["-cp", parentdir,<class-name><program-to-jbc> ast])
		where
			cfname := <concat-strings ; guarantee-extension(|"class")> [project-path, "/","bin", "/", <class-name><program-to-jbc> ast] ;
			<refresh-workspace-file> cfname	
	
		*/
	/*generate-class:
		(selected, position, ast, path, project-path) -> None()
		with 
			parentdir := <dirname> path ;
			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", $[[<project-path>]/bin]], $[[<project-path>]/[path]])
		where
			cfname := <concat-strings ; guarantee-extension(|"class")> [project-path, "/", <dirname> path, "/", <class-name> ast] ;
			<refresh-workspace-file> cfname
			
	generate-class-file:
	(selected, position, ast, path, project-path) -> None()
	where
		(filename, result):=<generate-jbc>(selected, position, ast, path, project-path);
		<generate-class>(selected, position, result, filename, project-path)
	*/
	/*
	origin-relative-path:
    trm -> rel-path
    where
      full-path := <origin-file> trm;
      len-project-prefix := <project-path; string-length; inc>;
      rel-path := <string-as-chars(drop(|len-project-prefix))> full-path
      
	*/
	
	mkpth:
		(selected, position, ast, path, project-path) -> None()
		with
		dir := <dir> path ;
			
		<mkdir>dir
				where
			<refresh-workspace-file> dir
dir:
	path->dir
	
	where
		length:=<string-length>path;
		l:=<subti>(length,2);
	dir := <string-as-chars(take(|l))> path
	
/*	generate-class:
		(selected, position, ast, path, project-path) -> None()
		with
			temp:=<pp-jasminxt-string><program-to-jbc>selected ;
			<write-file>(path,temp);
			parentdir := <dirname> path ;
			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", parentdir, <guarantee-extension(|"j")>path])
		where
			cfname := <concat-strings ; guarantee-extension(|"class")> [project-path, "/", <dirname> path, "/", <class-name><program-to-jbc> ast] ;
			<refresh-workspace-file> cfname	

		write-file:
			(path,content)->None()
			where
			filename := <guarantee-extension(|"j")> path;	
			file:=<fopen> (filename, "w");
  	<fputs> (content, file);
  	<fclose> file;
  	<refresh-workspace-file> filename
	*/
	/*generate-class:
		(selected, position, ast, path, project-path) -> None()
		with
			temp:=<pp-jasminxt-string><program-to-jbc>selected ;
			<write-file>(path,temp);
			parentdir := <concat-strings> [project-path, "/","bin"] ;
			<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", parentdir, <guarantee-extension(|"j")>path])
		where
			cfname := <concat-strings ; guarantee-extension(|"class")> [project-path, "/","bin", "/", <class-name><program-to-jbc> ast] ;
			<refresh-workspace-file> cfname	
*/
		write-file:
			(path,content)->None()
			where
			filename := <guarantee-extension(|"j")> path;	
			file:=<fopen> (filename, "w");
  	<fputs> (content, file);
  	<fclose> file;
  	<refresh-workspace-file> filename
	generate-jbc: (selected, position, ast, path, project-path) -> None()//(filename, result)
  where
  	 filename := <guarantee-extension(|"il")> path;
  	 temp:=<program-to-cil>selected ;
  	result:=<pp-cil-string>temp;
  	file:=<fopen> (filename, "w");
  	<fputs> (result, file);
  	<fclose> file;
  	<refresh-workspace-file> filename
  	
  	generate-class:
		(selected, position, ast, path, project-path) -> None()
		with
			 filename := <guarantee-extension(|"il")> path;
  	 temp:=<program-to-cil>selected ;
  	result:=<pp-cil-string>temp;
  	file:=<fopen> (filename, "w");
  	<fputs> (result, file);
  	<fclose> file;
  	<refresh-workspace-file> filename;
  	
			dir:="C:/Windows/Microsoft.NET/Framework/v4.0.30319/ilasm";
			 <debug(!"exe")> filename;
			cfname := <guarantee-extension(|"exe")> filename ;
			<try(call)> (dir,["/exe", $[[<project-path>]/[filename]],$[/output=[<project-path>]/[cfname]]]);
		<refresh-workspace-file> cfname
  	
  	execute-class: (selected, position, ast, path, project-path) -> (filename, result)
  
  	with
			 filename := <guarantee-extension(|"il")> path;
  	 temp:=<program-to-cil;debug(!"a: ")>ast ;
  	 
  	
  	result:=<pp-CIL-debug; debug(!"b: ")>temp;
 	file:=<fopen> (filename, "w");
  	<fputs> (result, file);
  	<fclose> file;
  	<refresh-workspace-file> filename;
   	
		 	dir:="C:/Windows/Microsoft.NET/Framework/v4.0.30319/ilasm";
		 	 <debug(!"exe")> filename;
		 	cfname := <guarantee-extension(|"exe")> filename ;
		 	<try(call)> (dir,["/exe", $[[<project-path>]/[filename]],$[/output=[<project-path>]/[cfname]]]);
		 <refresh-workspace-file> cfname;
		 rundir:=<concat-strings>[project-path,"/",cfname];
		 <try(call)>(rundir,[])
  //	parentdir := <dirname> path ;
  	//	<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", parentdir, filename])
  //  		cfname := <concat-strings> [project-path, "/", <dirname> path, "/", <class-name> ast,".class"] ;
	//		<refresh-workspace-file> cfname
  		//<try(call)> ("java", ["-jar", $[[<project-path>]/lib/jasmin.jar], "-d", $[[<project-path>]/bin]], $[[<project-path>]/[filename]])
rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <program-to-cil>selected
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := selected
      
  debug-index-project =
    analysis-debug-index-project(|<language>)
  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)
  debug-task-partition =
    analysis-debug-task-partition(|<language>)
  debug-task-selection =
    analysis-debug-task-selection(|<language>)
    
  debug-project =
    analysis-debug-project(|<language>)
  debug-partition =
    analysis-debug-partition(|<language>)
    
  debug-reanalyze = 
    analysis-debug-reanalyze(|<language>)

strategies
	
	external execute-java(|path)