module lex/CIL-Names
imports lex/CIL-Numbers

exports
  sorts Identifier SQIdentifier QualifiedName LabelName ClassName FieldName
        MethodName ClassRef VarRef LabelRef FRef MRef

  lexical syntax
    [A-Za-z\.] [A-Za-z0-9\_]* -> Identifier    
    Identifier                -> SQIdentifier  
    "'" Identifier "'"        -> SQIdentifier  
    {Identifier "."}+         -> QualifiedName 
    ~[\=\:\.\"\-\ \t\n\r]+    -> LabelName     
    "extern"                  -> Identifier    {reject}
    "mscorlib"                -> Identifier    {reject}
    "assembly"                -> Identifier    {reject}
    "extern"                  -> LabelName     {reject}
    "mscorlib"                -> LabelName     {reject}
    "assembly"                -> LabelName     {reject}
    "ret"                     -> LabelName     {reject}
    "ret"                     -> Identifier    {reject}
    "call"                    -> LabelName     {reject}
    "call"                    -> Identifier    {reject}
    "void"                    -> LabelName     {reject}
    "void"                    -> Identifier    {reject}
    "int32"                   -> LabelName     {reject}
    "int32"                   -> Identifier    {reject}
    "[mscorlib]"              -> LabelName     {reject}
    "[mscorlib]"              -> Identifier    {reject}

  lexical restrictions
    Identifier -/- [a-zA-Z0-9\_]
    LabelName -/- ~[\=\:\.\"\-\ \t\n\r]

  context-free syntax
    QualifiedName -> ClassName  
    Identifier    -> FieldName  
    QualifiedName -> MethodName 
    SQIdentifier  -> VarName    
    Identifier    -> VarName    

  context-free syntax
    CONTENTCOMPLETE -> ClassName  {cons("COMPLETION-ClassName")}
    CONTENTCOMPLETE -> FieldName  {cons("COMPLETION-FieldName")}
    CONTENTCOMPLETE -> MethodName {cons("COMPLETION-MethodName")}
    CONTENTCOMPLETE -> VarName    {cons("COMPLETION-VarName")}

  context-free syntax
    ClassName  -> ClassRef {cons("CRef")}
    Int        -> VarRef   {cons("VarNum")}
    LabelName  -> LabelRef {cons("LabelRef")}
    FieldName  -> FRef     {cons("FRef")}
    MethodName -> MRef     {cons("MRef")}

  context-free syntax
    CONTENTCOMPLETE -> ClassRef {cons("COMPLETION-ClassRef")}
    CONTENTCOMPLETE -> VarRef   {cons("COMPLETION-VarRef")}
    CONTENTCOMPLETE -> LabelRef {cons("COMPLETION-LabelRef")}
    CONTENTCOMPLETE -> FRef     {cons("COMPLETION-FRef")}
    CONTENTCOMPLETE -> MRef     {cons("COMPLETION-MRef")}

  syntax
    

  context-free syntax
    "byte"    -> BaseTypeName {"ByteName"}
    "char"    -> BaseTypeName {"CharName"}
    "double"  -> BaseTypeName {"DoubleName"}
    "float"   -> BaseTypeName {"FloatName"}
    "int"     -> BaseTypeName {"IntName"}
    "long"    -> BaseTypeName {"LongName"}
    "short"   -> BaseTypeName {"ShortName"}
    "boolean" -> BaseTypeName {"BooleanName"}