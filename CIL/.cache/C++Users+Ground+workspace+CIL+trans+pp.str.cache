Module("pp",[Imports([Import("libstratego-gpp"),Import("lib/runtime/tmpl/pp"),Import("Common.pp.generated"),Import("libstratego-gpp"),Import("lib/runtime/tmpl/pp"),Import("include/CIL-parenthesize"),Import("Common.pp.generated"),Import("CIL.pp.generated"),Import("CIL-Class.pp.generated"),Import("CIL-Component.pp.generated"),Import("CIL-Directive.pp.generated"),Import("CIL-Field.pp.generated"),Import("CIL-Header.pp.generated"),Import("CIL-Method.pp.generated"),Import("CIL-Names.pp.generated"),Import("CIL-Numbers.pp.generated"),Import("CIL-Statement.pp.generated"),Import("CIL-Type.pp.generated"),Import("CIL-WhiteSpace.pp.generated"),Import("CIL-CilFILE.pp.generated"),Import("CIL-Call.pp.generated")]),Rules([SDefNoArgs("pp-CIL-string",Seq(CallNoArgs(SVar("prettyprint-CilFILE")),Seq(Build(NoAnnoList(Op("V",[NoAnnoList(List([])),RootApp(Id)]))),CallT(SVar("box2text-string"),[],[NoAnnoList(Int("120"))])))),RDefNoArgs("pp-debug",Rule(Var("ast"),Var("result"),[WithClause(LChoice(Assign(Var("result"),App(CallNoArgs(SVar("pp-CIL-string")),Var("ast"))),Seq(BA(Call(SVar("bottomup"),[Call(SVar("try"),[Seq(Not(CallNoArgs(SVar("is-string"))),Seq(Not(CallNoArgs(SVar("is-list"))),Seq(Not(CallNoArgs(SVar("pp-CIL-string"))),Call(SVar("debug"),[Build(NoAnnoList(Str("\"cannot pp \"")))]))))])]),Var("ast")),Assign(Var("result"),NoAnnoList(Str("\"\""))))))]))])])