module cil

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	include/CIL
	editor/CIL-Outliner
	lib/editor-common.generated
	lib/runtime/index/-
	lib/runtime/nabl/-
	lib/runtime/properties/-
	lib/runtime/types/-
	lib/runtime/task/-
	lib/runtime/analysis/-
	names
	check
	generate
	pp

rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-single-default-interface = 
		analysis-single-default(id, id, id|<language>)
	analysis-multiple-default-interface = 
		analysis-multiple-default(parse-file <+ !(), id, id, id|<language>, <project-path>)
	
	editor-save = analysis-save-default(|<language>)

rules // Editor services
	
	execute-cil: (selected, position, ast, path, project-path) -> None()
  
  	with
			 
		 	dir:="C:/Windows/Microsoft.NET/Framework/v4.0.30319/ilasm";
		 	 <debug(!"exe")> path;
		 	cfname := <guarantee-extension(|"exe")> path ;
		 	<try(call)> (dir,["/exe", $[[<project-path>]/[path]],$[/output=[<project-path>]/[cfname]]]);
		 <refresh-workspace-file> cfname;
		 rundir:=<concat-strings>[project-path,"/",cfname];
		 <try(call)>(rundir,[])
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) -> <fail>

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
			
	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection =
		analysis-debug-task-selection(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)

