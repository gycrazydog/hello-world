module codegen/method

imports
  
  runtime/editor/origins

  trans/codegen/-
   runtime/types/-
  
  milestone1/MiniJava
  milestone2/MiniJava.core
  lib/CIL/CIL
  rules


methods-to-jbc:
   	      		[]->[]
   	      	methods-to-jbc:
   	      		[head|tail]->r*
   	      		where
   	      			h:=<method-to-jbc>head;
   	      			t*:=<methods-to-jbc>tail;
   	      			r*:=[h,t*]	
    method-to-jbc: 	
  	 	 Method(t,n,ps,vs,ss,exp)->r
  	 	where
  	 		<debug(!"statement normal")>2;
  	 		statement*:=<stmtlist>ss ;
  	 		r*:=<return(|t);debug(!"return normal")>exp;
  	 		var_limit:=<addi>(<length>ps,<length>vs);
  	 		list*:=[ MaxStack(<max>(<stack-list>ss,<stack-limit>exp))//JBCLimitLocals(<inc>var_limit)
      ,statement*
      , r*
      ];
      (parameters,return):=<get-type>n;
      <debug(!"statement list normal")>1;<debug(!"method name ")>n;
  	 	r:=Method(
          []
        , <type-to-jbc;debug(!"method type")>t
        , "result"
        , <map(type-to-jbc)>parameters
        , NONE()
        , list*
        )
  	 	
  	 	/*r:= JBCMethod(
      [PUBLIC()]
    , n
    , JBCMethodDesc(<map(type-to-jbc)>parameters, <type-to-jbc;debug(!"method type")>t)
    , list*
    )
    */
    return(|type):
    	exp->r*
    	where
    		exp-byte*:=<exp-to-jbc>exp;
    		return:=<return-command>type;
    		r*:=[exp-byte*,return]
    		
    		return-command:
    			Int()->Return()
    		return-command:
    			Bool()->Return()
    		return-command:
    		ClassType(_)->Return()
    		return-command:
    		IntArray()->Return()
    				